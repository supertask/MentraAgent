// Prisma Schema
// データベーススキーマ定義

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// セッション
model Session {
  id           String   @id @default(uuid())
  userId       String
  deviceType   String   // 'mentra' | 'webcam'
  status       String   @default("active") // 'active' | 'paused' | 'completed' | 'error'
  startTime    DateTime @default(now())
  endTime      DateTime?
  
  transcriptions Transcription[]
  photos         Photo[]
  locations      Location[]
  importantMoments ImportantMoment[]
  specifications Specification[]
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([userId])
  @@index([status])
  @@index([startTime])
}

// 文字起こし
model Transcription {
  id          String   @id @default(uuid())
  sessionId   String
  session     Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  text        String   @db.Text
  isFinal     Boolean  @default(false)
  confidence  Float?
  language    String?
  speaker     String?
  
  timestamp   DateTime
  createdAt   DateTime @default(now())
  
  @@index([sessionId])
  @@index([timestamp])
  @@index([speaker])
}

// 写真
model Photo {
  id          String   @id @default(uuid())
  sessionId   String
  session     Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  filename    String
  storageKey  String   @unique
  mimeType    String
  size        Int
  width       Int?
  height      Int?
  
  relatedText String?  @db.Text
  analysis    Json?
  
  timestamp   DateTime
  createdAt   DateTime @default(now())
  
  @@index([sessionId])
  @@index([timestamp])
}

// 位置情報
model Location {
  id          String   @id @default(uuid())
  sessionId   String
  session     Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  lat         Float
  lng         Float
  accuracy    Float
  
  timestamp   DateTime
  createdAt   DateTime @default(now())
  
  @@index([sessionId])
  @@index([timestamp])
}

// 重要箇所
model ImportantMoment {
  id          String   @id @default(uuid())
  sessionId   String
  session     Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  text        String?  @db.Text
  reason      String
  importance  Float
  keywords    String[]
  entities    String[]
  
  photoId     String?
  
  timestamp   DateTime
  createdAt   DateTime @default(now())
  
  @@index([sessionId])
  @@index([timestamp])
  @@index([importance])
}

// 仕様書
model Specification {
  id          String   @id @default(uuid())
  sessionId   String
  session     Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  title       String
  summary     String   @db.Text
  content     Json     // Specificationの詳細構造
  
  status      String   @default("draft") // 'draft' | 'review' | 'approved' | 'archived'
  
  slackUrl    String?
  githubUrl   String?
  notionUrl   String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([sessionId])
  @@index([status])
}

// ユーザー（オプション）
model User {
  id          String   @id @default(uuid())
  email       String   @unique
  name        String
  
  settings    Json?    // ユーザー固有の設定
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([email])
}

// プロジェクト
model Project {
  id          String   @id @default(uuid())
  name        String   @unique
  githubRepo  String?  // GitHubリポジトリURL（Cursor Agent用）
  githubBranch String? @default("main") // ブランチ名
  githubSubDirectory String? // リポジトリ内のサブディレクトリ（例: /frontend, /packages/core）
  
  documents   ProjectDocument[]
  cursorAgentSessions CursorAgentSession[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([name])
}

// プロジェクトとドキュメントの中間テーブル
model ProjectDocument {
  id          String   @id @default(uuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  documentId  String
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  
  @@unique([projectId, documentId])
  @@index([projectId])
  @@index([documentId])
}

// ミーティング（仕様書・議事録）
model Document {
  id          String   @id @default(uuid())
  sessionId   String
  
  title       String
  summary     String   @db.Text
  content     Json     // Markdown + metadata
  
  type        String   // 'specification' | 'minutes' | 'memo'
  format      String   @default("markdown") // 'markdown'
  
  projects    ProjectDocument[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([sessionId])
  @@index([type])
}

// Cursor Agent セッション
model CursorAgentSession {
  id            String   @id @default(uuid())
  projectId     String
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  documentIds   String[] // 参照する仕様書ID
  
  status        String   // 'planning' | 'building' | 'completed' | 'error'
  plan          Json?    // Cursor Agentが作成したプラン
  build         Json?    // Cursor Agentが作成したビルド結果
  chatHistory   Json[]   @default([]) // チャット履歴
  
  // Cursor API関連
  cursorWorkspaceId String? // Cursor API workspace ID
  cursorAgentId String?     // Cursor Agent ID
  cursorUrl     String?     // Cursor UIでの表示URL
  branchName    String?     // GitHubブランチ名
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([projectId])
  @@index([status])
}

